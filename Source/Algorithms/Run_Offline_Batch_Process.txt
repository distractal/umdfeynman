**// Track current date and increment each time we successfully complete batch process
**// Method to 'fake date' for testing refills


Offline Batch Process:
5.  Run Offline Batch Process
	
	void runOfflineBatchProcess
	{

		
			For each store in store_table
				If store_status is 'O'
					Display error message
					Log warning message
					Return to main menu
	
		ReturnValue = AddDeleteStore(warehouse_item_data, store_data, etc)
		if (AddDeleteStore == 1)
			Log Error "Finished processing AddDeleteStore with Errors"
		if (AddDeleteStore == -1)
			Log Error "CRITICAL ERROR - SEQUENCE CHECK FAILED"
			break
		if (AddDeleteStore == 0)
			Log "AddDeleteStore completed successfully"
		
		.
		.
		.
		
		MergeValue = Merge(...)
		if (Merge == 1)
		
		
	}
		
	int AddDeleteStore(&table1, &table2, etc)
	
		// Critical error
			return -1
		// Non-critical error
			return 1
		// Success
			return 0	
	
	// Add/Delete Store Batch Subprocess
//	Try to read file "adddeletestore.txt"
        ExistenceCheck
            If file does not exist, log & proceed to next batch subprogram
        HeaderCheck
            If header is bad proceed to next subprogram
			//	First two characters != 'HD'
			//	Third character != <space>				
			// Then log error "Header read failed" & proceed to next batch subprogram				
		SequenceCheck
			If out of sequence proceed to next batch subprogram
			//If out of sequence, log error "<Batch job name> <Filename> Sequence validation failed, expected [stored_num] but encountered [file_num] " 
			//& proceed to next batch subprogram
            //sequence_numbers[adddeletestore] = <filesequencenumber>                
        TrailerCheck
			If no rows in file 
				UpdateSequenceNumber()
				proceed to next batch subprogram
			If issue reading trailer log error
            //If next line is trailer & trailer says 0 rows, log "Empty file", update sequence number (adddeletestore.txt) & proceed to next batch subprogram
            //If next line is trailer & trailer says >0 rows, log error "Trailer row count mismatch, trailer says [trailer_rows] & [file_rows] in file" & proceed to next batch subprogram
            // Read rows until trailer row, store in num_rows  // Unnecessary? (Case 'T' has same functionality)
		
		Move to record immediately following header
    (A) Process records
		while(ifstream.good() & !eof)  // While we can read from the file and are not at the end
			Read a line from file as as a string - input_line
			// Input section
			// If at trailer, proceed to next batch subprogram
			Switch input_line[0]
			// Format of globals for field position & length - <filename>_txt_<actioncode>_<field_name>_pos/len 
			// *NOTE*:  ONLY TRIM SPACES WHEN EVALUATING... EX:  SEARCH, MATCH, ETC.
			// *NOTE*:  ONLY UPPERCASE WHEN EVALUATING... EX:  SEARCH, MATCH, ETC.
			// User enters:  Frank
			// We store:  Frank
			// We evaluate:  FRANK		
			
			std::string input_string
				Case 'A'
					Create an instance of Add_Delete_Store_Event
					Store 'A' action_type in Add_Delete_store_Event
					input_string = input_line.substr(adddeletestore_txt_a_store_number_pos,adddeletestore_txt_a_store_number_len) // store_number_length is global designating store_number field length
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break				
					Store store# in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_a_store_address_pos,adddeletestore_txt_a_store_address_len)				
					Store store_address in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_a_store_city_name_pos,adddeletestore_txt_a_store_city_name_len)
					Store city_name in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_a_store_state_pos,adddeletestore_txt_a_store_state_len)
					if (!ValidateAllLetters(input_string))
						log error "State composed of characters other than letters"
						break
					Store state in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_a_store_zip_pos,adddeletestore_txt_a_store_zip_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break				
					Store zip in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_a_store_priority_pos,adddeletestore_txt_a_store_priority_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break				
					Store priority_level in Add_Delete_Store_Event
					Push_back Add_Delete_Store_Event instance to storage vector
				Case 'D'
					Create an instance of Add_Delete_Store_Event
					Store 'D' action_type in Add_Delete_store_Event
					input_string = input_line.substr(adddeletestore_txt_d_store_number_pos,adddeletestore_txt_d_store_number_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break								
					Store store# in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_d_store_address_pos,adddeletestore_txt_d_store_address_len)			
					Store store_address in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_d_store_city_name_pos,adddeletestore_txt_d_store_city_name_len)				
					Store city_name in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_d_store_state_pos,adddeletestore_txt_d_store_state_len)
					if (!ValidateAllLetters(input_string))
						log error "State composed of characters other than letters"
						break
					Store state in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_d_store_zip_pos,adddeletestore_txt_d_store_zip_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break							
					Store zip in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_d_store_priority_pos,adddeletestore_txt_d_store_priority_len)
					int store_int = StringToInt(input_string)
					if (store_int < 0 || store_int > 15)
						log error "Priority is negative or greater than 15 on line [curr_item index]"
						break				
					Store priority_level in Add_Delete_Store_Event
					Push_back Add_Delete_Store_Event instance to storage vector
				Case 'I'
					Create an instance of Add_Delete_Store_Event
					Store 'I' action_type in Add_Delete_store_Event
					input_string = input_line.substr(adddeletestore_txt_i_item_number_pos,adddeletestore_txt_i_item_number_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break				
					Store item_code in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_i_store_default_quantity_pos,adddeletestore_txt_i_store_default_quantity_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break				
					Store default_quantity in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_i_store_reorder_level_pos,adddeletestore_txt_i_store_reorder_level_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break				
					Store reorder_level in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_i_store_reorder_quantity_pos,adddeletestore_txt_i_store_reorder_quantity_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break				
					Store reorder_quantity in Add_Delete_Store_Event               
					Push_back Add_Delete_Store_Event instance to storage vector
				Case 'C'
					Create an instance of Add_Delete_Store_Event
					Store 'C' action_type in Add_Delete_Store_Event
					input_string = input_line.substr(adddeletestore_txt_c_store_overall_item_count_pos,adddeletestore_txt_c_store_overall_item_count_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break				
					Store store_overall_item_count in Add_Delete_Store_Event
					Push_back Add_Delete_Store_Event instance to storage vector
					Proceed to next record
				Case 'T'
					Read 1 character to nowhere (space)
					//Read 4 characters and store in num_rows
					//Count number of items in table vector
					//If number of items <> num_rows, log error "Trailer row count does not match number of rows" and proceed
				Case default
					Log error "Invalid action code - <givencode>"
				Proceed to next record
        // Cleanup section
		// Process & Cleanup section
					
			CreateFile("addstoreitems.txt", 7)			
			Set item_count to 0							

		returnitems.txt:
			CreateFile("returnfile.txt", 6)
			InsertHeader(returnfile.txt, 6)
		Initialize delete_item_counter to 0
							
		(B) For curr_item = 0 to count of Add_Delete_Store_Event vector items
			
				if item[curr_item].action_type == 'C'
					Log error "'C' record encountered out of sequence"
				else if item[curr_item].action_type == 'I'
					Log error "'I' record encountered out of sequence"				
				else if item[curr_item].action_type == 'D'
					Check if store does not exist
                    If so, log error "Store does not exist" and skip to next line // Use continue			
					Check if store is already deleted (store_status == 'D')
						If so, log error "Store has already been deleted" and skip to next line // Use continue
					Look up store information from store table
					If store_priority != item.store_priority_level
					OR	
					If store_number != item.store_id
					OR
					If street_address != item.street_address
					OR
					If city_name != item.city_name
					OR
					If state_name != item.state_name
					OR
					If zip_code != item.zip_code
						Log error "Data mismatch, deletion aborted"
					Else
						delete_item_counter++
												
						For each item in store_inventory where store_number = curr_item.store_number							
							
							//Create a line in returnitem.txt:
								//Zero-filled vendor number (warehouse_item_data.vendor_number)
								//Zero-filled item code (warehouse_item_data.item_number)
								//Zero-filled quantity (store_inventory.quantity)
							WriteReturnItems(returnitems_txt, vendor_number, item_code, quantity)
								
							Set the item in store_inventory to 'D'							
						Set the item in store_data to 'D'				
														
				else if item[curr_item].action_type == 'A' && store does not exist					
					Create instance of store_data
					Set store_status to C
					Set store_priority to item.store_priority_level
					Set store_number to item.store_id
					Set street_address to item.street_address
					Set city_name to item.city_name
					Set state_name to item.state_name
					Set zip_code to item.zip_code
					Push back instance of store_data to store_data table vector				
					
					If last element
						Log error "Error - End of file reached but no trailer"
						break
					
					Move to next item (curr_item++)
					Reinitialize item_counter to 0
					// I mode
					while item[curr_item].action_type == I && Not past last element					
						item_counter++
						Create instance of store_inventory
						Set store_inventory.item_code to item.item_code
						Set store_inventory.store_default_quantity to item.store_default_quantity
						Set store_inventory.store_reorder_level to item.store_reorder_level
						Set store_inventory.store_reorder_quantity to item.store_reorder_quantity
						Push back store_inventory item to store_inventory table
													
						Write to addstoreitems.txt:
						'A'
						Leading zeroes + store id
						Leading zeroes + store priority level
						Leading zeroes + item code
						Leading zeroes + requested quantity
						Carriage return / nextline
						Move to next item (curr_item++)
					else If (past last element) 
						log error "No corresponding C for A on line [curr_item index]"
						break
					if item[curr_item].action-type == 'C'								
						If C record item count != item_counter Log error "Item count on line [curr_item index] does not match number of items"
					else If (trailer)
						Log error "No corresponding control record <linenumber>"
						break			
					
					// THIS SECTION IS SUPER JANKY SO IF WE FIGURE OUT HOW TO DO IT A DIFFERENT WAY
					// PLEASE DO
					else if item[curr_item].action_type == 'D'
						Log error "<action_type> on <line_number> out of sequence"
						curr_item--
						**[REFERENCE CODE FROM 'D' SECTION ABOVE]**	- REPEAT
					else if item[curr_item].action_type == 'A'
						Log error "<action_type> on <line_number> out of sequence"	
						curr_item--
						
					else If item[curr_item].action_type != 'C'
						Log error "<action_type> on <line_number> out of sequence"
				Else If item[curr_item].action_type == 'A' && store does exist
					log error "Store already exists"
				Else If item[curr_item].action-type == 'T' && !(last element)
					log error "Out of sequence trailer record"
				Else If item[curr_item].action_type == 'T' && (last element)
					log "Done processing adddeletestore.txt"				
				Else
					log error "Invalid action code on line [curr_item index]"
					
				If item[curr_item].action_type != 'T' && (last element)
					log "Error - End of file reached but no trailer"
		
		InsertTrailer(returnitems_txt, delete_item_counter)
		Close and save returnitems.txt
		
		std::sort store_data based on store_priority	
		InsertTrailer(addstoreitems.txt, item_counter)				
		Close and save addstoreitems.txt	
            				
		Proceed to next batch subprogram
		
////// Merge returnfile.txt & vendororder.txt
		// Try to read file "returnitems.txt"
		    If file does not exist, log & proceed to next batch subprogram
        HeaderCheck
            If header is bad proceed to next subprogram
			//	First two characters != 'HD'
			//	Third character != <space>				
			// Then log error "Header read failed" & proceed to next batch subprogram				
		SequenceCheck
			If out of sequence proceed to next batch subprogram
			//If out of sequence, log error "<Batch job name> <Filename> Sequence validation failed, expected [stored_num] but encountered [file_num] " 
			//& proceed to next batch subprogram
            //sequence_numbers[adddeletestore] = <filesequencenumber>                
        TrailerCheck
			If no rows in file 
				UpdateSequenceNumber()
				proceed to next batch subprogram
			If issue reading trailer log error
            //If next line is trailer & trailer says 0 rows, log "Empty file", update sequence number (adddeletestore.txt) & proceed to next batch subprogram
            //If next line is trailer & trailer says >0 rows, log error "Trailer row count mismatch, trailer says [trailer_rows] & [file_rows] in file" & proceed to next batch subprogram
            // Read rows until trailer row, store in num_rows  // Unnecessary? (Case 'T' has same functionality)
			
		// Try to read file "vendororder.txt"
		    If file does not exist, log & proceed to next batch subprogram
        HeaderCheck
            If header is bad proceed to next subprogram
			//	First two characters != 'HD'
			//	Third character != <space>				
			// Then log error "Header read failed" & proceed to next batch subprogram				
		SequenceCheck
			If out of sequence proceed to next batch subprogram
			//If out of sequence, log error "<Batch job name> <Filename> Sequence validation failed, expected [stored_num] but encountered [file_num] " 
			//& proceed to next batch subprogram
            //sequence_numbers[adddeletestore] = <filesequencenumber>                
        TrailerCheck
			If no rows in file 
				UpdateSequenceNumber()
				proceed to next batch subprogram
			If issue reading trailer log error
            //If next line is trailer & trailer says 0 rows, log "Empty file", update sequence number (adddeletestore.txt) & proceed to next batch subprogram
            //If next line is trailer & trailer says >0 rows, log error "Trailer row count mismatch, trailer says [trailer_rows] & [file_rows] in file" & proceed to next batch subprogram
            // Read rows until trailer row, store in num_rows  // Unnecessary? (Case 'T' has same functionality)
		
		Create vector of Merge_Vendor_Return_Event
		
		Move to record immediately following header
    (A) Get input from files
		int item_counter = 0
		
		// Read from returnitems.txt
		while(ifstream.good() & !eof)  // While we can read from the file and are not at the end
			Read a line from file as as a string - input_line
			
			// Input section
			// If at trailer, proceed to next batch subprogram				
			
			std::string input_string
			input_string = input_line.substr(returnitems_txt_vendor_code_pos,returnitems_txt_vendor_code_len) // store_number_length is global designating store_number field length
			if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break			
			Store vendor_code in Merge_Vendor_Return_Event
			input_string = input_line.substr(returnitems_txt_item_code_pos,returnitems_txt_item_code_len) // store_number_length is global designating store_number field length
			if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break			
			Store item_code in Merge_Vendor_Return_Event
			input_string = input_line.substr(returnitems_txt_incoming_quantity_pos,returnitems_txt_incoming_quantity_len) // store_number_length is global designating store_number field length
			if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break			
			Store incoming_quantity in Merge_Vendor_Return_Event
			item_counter++
		
		// Read from vendororder.txt
		while(ifstream.good() & !eof)  // While we can read from the file and are not at the end
			Read a line from file as as a string - input_line
			
			// Input section
			// If at trailer, proceed to next batch subprogram
				
			std::string input_string
			input_string = input_line.substr(vendororder_txt_vendor_code_pos,vendororder_txt_vendor_code_len) // store_number_length is global designating store_number field length
			if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break
			Store vendor_code in Merge_Vendor_Return_Event
			input_string = input_line.substr(vendororder_txt_item_code_pos,vendororder_txt_item_code_len) // store_number_length is global designating store_number field length
			if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break		
			Store item_code in Merge_Vendor_Return_Event
			input_string = input_line.substr(vendororder_txt_incoming_quantity_pos,vendororder_txt_incoming_quantity_len) // store_number_length is global designating store_number field length
			if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break			
			Store incoming_quantity in Merge_Vendor_Return_Event
			item_counter++
					
		CreateFile(itemreceived.txt, 2)
	(B)	For curr_item = 0 to count of Merge_Vendor_Return_Event
			Write to file:
						Leading zeroes + vendor_code
						Leading zeroes + item_code
						Leading zeroes + incoming_quantity
						"2017-11-17" (hard-coded string) (DURWIN IS NOT ALLOWED TO CODE THIS SECTION)
						Carriage return / nextline		
		InsertTrailer(itemreceived.txt, item_counter)
		Close itemreceived.txt
		
		// Try to read file "itemreceived.txt"
		    If file does not exist, log & proceed to next batch subprogram
        HeaderCheck
            If header is bad proceed to next subprogram
			//	First two characters != 'HD'
			//	Third character != <space>				
			// Then log error "Header read failed" & proceed to next batch subprogram				
		SequenceCheck
			If out of sequence proceed to next batch subprogram
			//If out of sequence, log error "<Batch job name> <Filename> Sequence validation failed, expected [stored_num] but encountered [file_num] " 
			//& proceed to next batch subprogram
            //sequence_numbers[adddeletestore] = <filesequencenumber>                
        TrailerCheck
			If no rows in file 
				UpdateSequenceNumber()
				proceed to next batch subprogram
			If issue reading trailer log error
            //If next line is trailer & trailer says 0 rows, log "Empty file", update sequence number (adddeletestore.txt) & proceed to next batch subprogram
            //If next line is trailer & trailer says >0 rows, log error "Trailer row count mismatch, trailer says [trailer_rows] & [file_rows] in file" & proceed to next batch subprogram
            // Read rows until trailer row, store in num_rows  // Unnecessary? (Case 'T' has same functionality)
		
////// Warehouse incoming shipment generation
		(B)	For curr_item = 0 to count of Merge_Vendor_Return_Event vector items
	
		// Item check
			bool itemFound == false
			For each wh_item in warehouse_item_data
				If item[curr_item].item_number == wh_item.item_number
					If item[curr_item].vendor_number == wh_item.vendor_number
						wh_item.quantity += item[curr_item].quantity
						itemFound = true
						break
					Else
						Log Error "Item <Item> found but vendor number <vendor_number> does not match"		
			If (!itemFound)
				Log Error "Item <Item> not found"
				
		Close itemreceived.txt
		
////// En masse inventory item updates
		//	Try to read file "items.txt"
        ExistenceCheck
            If file does not exist, log & proceed to next batch subprogram
        HeaderCheck
            If header is bad proceed to next subprogram
			//	First two characters != 'HD'
			//	Third character != <space>				
			// Then log error "Header read failed" & proceed to next batch subprogram				
		SequenceCheck
			If out of sequence proceed to next batch subprogram
			//If out of sequence, log error "Sequence validation failed, expected [stored_num] but encountered [file_num] " 
			//& proceed to next batch subprogram
            //sequence_numbers[adddeletestore] = <filesequencenumber>                
        TrailerCheck
			If no rows in file 
				UpdateSequenceNumber()
				proceed to next batch subprogram
			If issue reading trailer log error
            //If next line is trailer & trailer says 0 rows, log "Empty file", update sequence number (adddeletestore.txt) & proceed to next batch subprogram
            //If next line is trailer & trailer says >0 rows, log error "Trailer row count mismatch, trailer says [trailer_rows] & [file_rows] in file" & proceed to next batch subprogram
            // Read rows until trailer row, store in num_rows  // Unnecessary? (Case 'T' has same functionality)
	
		Move to record immediately following header
	(A) while(ifstream.good() & !eof)  // While we can read from the file and are not at the end		
			Read a line from file as as a string - input_line
			// Input section
			// If at trailer, proceed to next batch subprogram
			std::string input_string
			Switch input_line[0]
				Case 'D'
					Create an instance of Update_Item_Data_Event
					Store 'D' action_type in Update_Item_Data_Event
					input_string = input_line.substr(items_txt_d_item_number_pos,items_txt_d_item_number_len)
					Store item_code in Update_Item_Data_Event instance
					Push_back Update_Item_Data_Event instance to storage vector
				Case 'A'
					Store 'A' action_type in Update_Item_Data_Event              
					input_string = input_line.substr(items_txt_a_item_number_pos,items_txt_a_item_number_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break
					Store item_code in Update_Item_Data_Event instance				
					input_string = input_line.substr(items_txt_a_item_name_pos,items_txt_a_item_name_len)
					Store item_name in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_a_item_description_pos,items_txt_a_item_description_len)
					Store item_description in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_a_item_dosage_pos,items_txt_a_item_dosage_len)
					Store item_dosage in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_a_warehouse_reorder_level_pos,items_txt_a_warehouse_reorder_level_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break
					Store warehouse_reorder_level in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_a_vendor_code_pos,items_txt_a_vendor_code_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break
					Store vendor_code in Update_Item_Data_Event
					input_string = input_line.substr(items_txt_a_warehouse_reorder_quantity_pos,items_txt_a_warehouse_reorder_quantity_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break
					Store warehouse_reorder_quantity in Update_Item_Data_Event
					input_string = input_line.substr(items_txt_a_expected_delivery_time_pos,items_txt_a_expected_delivery_time_len)
					Store expected_delivery_time in Update_Item_Data_Event instance
					Push_back Update_Item_Data_Event instance to storage vector
				Case 'C'
					Store 'C' action_type in Update_Item_Data_Event
					input_string = input_line.substr(items_txt_c_item_number_pos,items_txt_c_item_number_len)
					Store item_code in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_c_item_name_pos,items_txt_c_item_name_len)
					Store item_name in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_c_item_description_pos,items_txt_c_item_description_len)
					Store item_description in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_c_item_dosage_pos,items_txt_c_item_dosage_len)
					Store item_dosage in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_c_warehouse_reorder_level_pos,items_txt_c_warehouse_reorder_level_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break
					Store warehouse_reorder_level in Update_Item_Data_Event instance
					input_string = input_line.substr(items_txt_c_vendor_code_pos,items_txt_c_vendor_code_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break
					Store vendor_code in Update_Item_Data_Event
					input_string = input_line.substr(items_txt_c_warehouse_reorder_quantity_pos,items_txt_c_warehouse_reorder_quantity_len)
					if (StringToInt(input_string) < 0)
						log error "Store number is negative on line [curr_item index]"
						break
					Store warehouse_reorder_quantity in Update_Item_Data_Event
					input_string = input_line.substr(items_txt_c_expected_delivery_time_pos,items_txt_c_expected_delivery_time_len)
					Store expected_delivery_time in Update_Item_Data_Event instance				
					Push_back Update_Item_Data_Event instance to storage vector
				Case 'T'
					//Do nothing
					//Read 4 characters and store in num_rows
					//Count number of items in table vector
					//If number of items <> num_rows, log error "Trailer row count does not match number of rows" and proceed
				Case 'N'
					Store 'N' action_type in Update_Item_Data_Event
					Store specific_action_designation // ie, A records = NA
					input_string = input_line.substr(items_txt_n_update_item_action_count,items_txt_n_update_item_action_count_len) // Specific action count is number following N that indicates the number of records of that specific action
					Store update_item_action_count in Update_Item_Data_Event instance			
				Case default
					Log error "Invalid action code - <givencode> <linenumber>"			
			Proceed to next record
			
		// Cleanup section

		For curr_item = 0 to count of Add_Delete_Store_Event vector items
*				TODO:  **// If any integers are negative, log error & delete
			
		If (CheckSpaces(items.txt, 20)
					Store "" in Update_Item_Data_Event // Signifies we need to not make a change during processing
				Else
					Trim spaces off right side
					*Convert letters to uppercase
					Store item_name in Update_Item_Data_Event instance
		

		CheckSpaces(std::string input_string, int field_length)
			Set all_spaces_flag to true
			For each character in (iterate over field_length characters)
				If character != <space> 
					all_spaces_flag == false
					return all_spaces_flag		
	
//// Store automated replenishment (qty <= reorder level) AKA Batch Inventory Review
		
		CreateFile("batchreplenish.txt", 8)		
		InsertHeader(batchreplenish_txt, 8)			
	
		std::vector<store_inventory> store_table (referencing this table)		
		Int item_counter = 0
		
		For each store
			For each item
				If (item.quantity <= item.reorder_level)
					Write:
						'B'
						Zero-filled store.store_number
						Zero-filled store.store_priority
						Zero-filled item.item_number
						Zero-filled item.reorder_quantity					
					item_counter++					
		
		InsertTrailer("batchreplenish.txt" item_counter)
		Close itemreceived.txt


		













