Offline Batch Process:
5.  Run Offline Batch Process
    For each store in store_table
        If store_status is 'O'
            Display error message
            Log warning message
            Return to main menu
	
	// Add/Delete Store Batch Subprocess
//	Try to read file "adddeletestore.txt"
        ExistenceCheck
            If file does not exist, log & proceed to next batch subprogram
        HeaderCheck
            If header is bad proceed to next subprogram
			//	First two characters != 'HD'
			//	Third character != <space>				
			// Then log error "Header read failed" & proceed to next batch subprogram				
		SequenceCheck
			If out of sequence proceed to next batch subprogram
			//If out of sequence, log error "Sequence validation failed, expected [stored_num] but encountered [file_num] " 
			//& proceed to next batch subprogram
            //sequence_numbers[adddeletestore] = <filesequencenumber>                
        TrailerCheck
			If no rows in file 
				UpdateSequenceNumber()
				proceed to next batch subprogram
			If issue reading trailer proceed to next batch subprogram
            //If next line is trailer & trailer says 0 rows, log "Empty file", update sequence number (adddeletestore.txt) & proceed to next batch subprogram
            //If next line is trailer & trailer says >0 rows, log error "Trailer row count mismatch, trailer says [trailer_rows] & [file_rows] in file" & proceed to next batch subprogram
            // Read rows until trailer row, store in num_rows  // Unnecessary? (Case 'T' has same functionality)
		
		Move to record immediately following header
    (A) Process records
		If at end of file, proceed to cleanup
		Read a line from file as as a string - input_line
        // Input section
        // If at trailer, proceed to next batch subprogram
        Switch input_line[0]
		// Format of globals for field position & length - <filename>_txt_<actioncode>_<field_name>_pos/len 
		// *NOTE*:  ONLY TRIM SPACES WHEN EVALUATING... EX:  SEARCH, MATCH, ETC.
		// *NOTE*:  ONLY UPPERCASE WHEN EVALUATING... EX:  SEARCH, MATCH, ETC.
		// User enters:  Frank
		// We store:  Frank
		// We evaluate:  FRANK		
		
		std::string input_string
            Case 'A'
                Create an instance of Add_Delete_Store_Event
                Store 'A' action_type in Add_Delete_store_Event
                input_string = input_line.substr(adddeletestore_txt_a_store_number_pos,adddeletestore_txt_a_store_number_len) // store_number_length is global designating store_number field length
				Store store# in Add_Delete_Store_Event                
				input_string = input_line.substr(adddeletestore_txt_a_store_address_pos,adddeletestore_txt_a_store_address_len)
				Store store_address in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_a_store_city_name_pos,adddeletestore_txt_a_store_city_name_len)
				Store city_name in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_a_store_state_pos,adddeletestore_txt_a_store_state_len)
                Store state in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_a_store_zip_pos,adddeletestore_txt_a_store_zip_len)
                Store zip in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_a_store_priority_pos,adddeletestore_txt_a_store_priority_len)
                Store priority_level in Add_Delete_Store_Event
                Push_back Add_Delete_Store_Event instance to storage vector
                Proceed to next record
            Case 'D'
                Store 'D' action_type in Add_Delete_store_Event
                input_string = input_line.substr(adddeletestore_txt_d_store_number_pos,adddeletestore_txt_d_store_number_len)
                Store store# in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_d_store_address_pos,adddeletestore_txt_d_store_address_len)
                Store store_address in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_d_store_city_name_pos,adddeletestore_txt_d_store_city_name_len)
                Store city_name in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_d_store_state_pos,adddeletestore_txt_d_store_state_len)
                Store state in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_d_store_zip_pos,adddeletestore_txt_d_store_zip_len)
                Store zip in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_d_store_priority_pos,adddeletestore_txt_d_store_priority_len)
                Store priority_level in Add_Delete_Store_Event
                Push_back Add_Delete_Store_Event instance to storage vector
                Proceed to next record
            Case 'I'
            	Store 'I' action_type in Add_Delete_store_Event
                input_string = input_line.substr(adddeletestore_txt_i_item_number_pos,adddeletestore_txt_i_item_number_len)
				Store item_code in Add_Delete_Store_Event
				input_string = input_line.substr(adddeletestore_txt_i_store_default_quantity_pos,adddeletestore_txt_i_store_default_quantity_len)
				Store default_quantity in Add_Delete_Store_Event
				input_string = input_line.substr(adddeletestore_txt_i_store_reorder_level_pos,adddeletestore_txt_i_store_reorder_level_len)
               	Store reorder_level in Add_Delete_Store_Event
				input_string = input_line.substr(adddeletestore_txt_i_store_reorder_quantity_pos,adddeletestore_txt_i__store_reorder_quantity_len)
               	Store reorder_quantity in Add_Delete_Store_Event               
                Push_back Add_Delete_Store_Event instance to storage vector
                Proceed to next record
            Case 'C'
                Store 'C' action_type in Add_Delete_Store_Event
                input_string = input_line.substr(adddeletestore_txt_c_store_overall_item_count_pos,adddeletestore_txt_c_store_overall_item_count_len)
               	Store store_overall_item_count in Add_Delete_Store_Event
                Push_back Add_Delete_Store_Event instance to storage vector
                Proceed to next record
            Case 'T'
                Read 1 character to nowhere (space)
                //Read 4 characters and store in num_rows
                //Count number of items in table vector
                //If number of items <> num_rows, log error "Trailer row count does not match number of rows" and proceed
            Case default
                Log error "Invalid action code - <givencode>"
				
        // Cleanup section
		// Process & Cleanup section
		
				ExistenceCheck
			If file exists:
				HeaderCheck					
					If header is bad proceed to next batch subprogram
				SequenceCheck
					If out of sequence proceed to next batch subprogram				
				item_count = TrailerCheck
					If trailer is bad proceed to next batch subprogram
				DeleteTrailer				
			If file does not exist:
				CreateFile("storeupdate.txt", 1)			
				Set item_count to 0							

		(B) For curr_item = 0 to count of Add_Delete_Store_Event vector items
			
				if item[curr_item].action_type == 'C'
					Log error "'C' record encountered out of sequence"
				else if item[curr_item].action_type == 'I'
					Log error "'I' record encountered out of sequence"				
				else if item[curr_item].action_type == 'D'
					 Check if store does not exist
                    If so, log error "Store does not exist" and skip to next line // Use continue			
					Check if store is already deleted (store_status == 'D')
						If so, log error "Store has already been deleted" and skip to next line // Use continue
					Look up store information from store table
					If store_priority != item.store_priority_level
					OR	
					If store_number != item.store_id
					OR
					If street_address != item.street_address
					OR
					If city_name != item.city_name
					OR
					If state_name != item.state_name
					OR
					If zip_code != item.zip_code
						Log error "Data mismatch, deletion aborted"
					Else
						
							
						*******TODO
						For each item in store_inventory where store_number = item.store_number
							Open itemreceived.txt
							Create a line in itemreceived.txt
							Delete the item from store_inventory
							Close itemreceived.txt
						Set the item in store_data to 'D'				
						Delete the store
								
				else if item[curr_item].action_type == 'A' && store does not exist					
					Create instance of store_data
					Set store_status to C
					Set store_priority to item.store_priority_level
					Set store_number to item.store_id
					Set street_address to item.street_address
					Set city_name to item.city_name
					Set state_name to item.state_name
					Set zip_code to item.zip_code
					Push back instance of store_data to store_data table vector				
					
					Move to next item (curr_item++)
					while item[curr_item].action_type != C || Not last element || Not Trailer
						If item[curr_item].action_type == I
							item_counter++
							Create instance of store_inventory
							Set store_inventory.item_code to item.item_code
							Set store_inventory.store_default_quantity to item.store_default_quantity
							Set store_inventory.store_reorder_level to item.store_reorder_level
							Set store_inventory.store_reorder_quantity to item.store_reorder_quantity
							Push back store_inventory item to store_inventory table
														
							Write to storeupdate.txt:
							'A'
							Leading zeroes + store id
							Leading zeroes + store priority level
							Leading zeroes + item code
							Leading zeroes + requested quantity
							Carriage return / nextline						
						Else
							Log error "Out of sequence item, ignoring"
						Move to next item
					If last element || trailer, log error "No corresponding C for A on line [curr_item index]"
						break out of for loop
					if item[curr_item].action-type == 'C'								
						If C record item count != item_counter Log error "Item count on line [curr_item index] does not match number of items"
				Else If item[curr_item].action_type == 'A' && store does exist
					log error "Store already exists"				
				Else
					log error "Invalid action code on line [curr_item index]"
					
				
			
				
		std::sort store_data based on store_priority				
		
		InsertTrailer(item_counter)				
		Close and save file
		
*				TODO:  **// For priority level validate <= 15 & >= 1, otherwise log error & delete
*				TODO:  **// If any integers are negative, log error & delete			
				
		
		
		

								
			// Old "cleanup" section 4/9/2017
				// If item[curr_item].action_type == 'I'
					// Log Error "I record encountered out of sequence"
					// //Delete item[curr_item]
					// //curr_item--
				// If item[curr_item].action_type == 'C'
					// Log Error "C record encountered out of sequence"
					// //Delete item[curr_item]				
					// //curr_item--
				// If item[curr_item].action_type == 'A'
					// Set item_counter to 0
					// Set a_record to curr_item
					// curr_item++
					// If item[curr_item].action_type != 'I'
						// Delete item[a_record]
						// Delete item[curr_item]
						// Log Error
					// While (item[curr_item].action_type == 'I')
						// item_counter++
						// curr_item++
					// If item[curr_item].action_type != 'C' || C record item count != item_counter
						// If item[curr_item].action_type != 'C' Log Error "Action codes A-I-C out of sequence"
						// If C record item count != item_counter Log Error "Item count does not match C record count"
						// curr_item-- // Back up one record so we don't delete possibly 'good' record
						// while (curr_item => a_record)
							// Delete item[curr_item]
							// curr_item--	
							
		// (B)	For curr_item = 0 to count of Add_Delete_Store_Event vector items	
				
		
		
				
		Process actions section
			// if item.action_type == 'A'
                // Check if store exists
                    // If so, log error "Store already exists"
					// Increment curr_item until we hit that store's 'C' row, then go to B // use continue					
                // Create instance of store_data
                // Set store_status to C
                // Set store_priority to item.store_priority_level
                // Set store_number to item.store_id
				// Set street_address to item.street_address
				// Set city_name to item.city_name
				// Set state_name to item.state_name
				// Set zip_code to item.zip_code
                // curr_item++
                // Create vector of store_inventory items
                // while item.action_type == 'I'
                    // Create instance of store_inventory
                    // Set store_inventory.item_code to item.item_code
                    // Set store_inventory.store_default_quantity to item.store_default_quantity
                    // Set store_inventory.store_reorder_level to item.store_reorder_level
                    // Set store_inventory.store_reorder_quantity to item.store_reorder_quantity
                    // Push back store_inventory item to store_inventory vector
                    // Reinitialize instance of store_inventory to nothing
								
					// Write to storeupdate.txt:
						// 'A'
						// Leading zeroes + store id
						// Leading zeroes + store priority level
						// Leading zeroes + item code
						// Leading zeroes + requested quantity
						// Carriage return / nextline
					// item_count++
                    // curr_item++
				// curr_item++ // Move past "C" record
				
				// For each item in vector of store_inventory items
					// Push back to store_inventory vector table
				// Push back instance of store_data to store_data table vector
				
				// std::sort store_data based on store_priority				
				
				// InsertTrailer(item_count)				
				// Close and save file
				
				
			// else if item.action_type == 'D'		
                // Check if store does not exist
                    // If so, log error "Store does not exist" and skip to next line // Use continue			
				// Check if store is already deleted (store_status == 'D')
					// If so, log error "Store has already been deleted" and skip to next line // Use continue
				// Look up store information from store table
                // If store_priority != item.store_priority_level
				// OR	
                // If store_number != item.store_id
				// OR
				// If street_address != item.street_address
				// OR
				// If city_name != item.city_name
				// OR
				// If state_name != item.state_name
				// OR
				// If zip_code != item.zip_code
					// Log error "Data mismatch, deletion aborted"
				// Else
					// Delete the store
						
						// *******TODO
						// For each item in store_inventory where store_number = item.store_number
							// Open itemreceived.txt
							// Create a line in itemreceived.txt
							// Delete the item from store_inventory
							// Close itemreceived.txt
						// Set the item in store_data to 'D'
							
                // curr_item++
            				
			Proceed to next batch subprogram
		
////// En masse inventory item updates
		//	Try to read file "items.txt"
        ExistenceCheck
            If file does not exist, log & proceed to next batch subprogram
        HeaderCheck
            If header is bad proceed to next subprogram
			//	First two characters != 'HD'
			//	Third character != <space>				
			// Then log error "Header read failed" & proceed to next batch subprogram				
		SequenceCheck
			If out of sequence proceed to next batch subprogram
			//If out of sequence, log error "Sequence validation failed, expected [stored_num] but encountered [file_num] " 
			//& proceed to next batch subprogram
            //sequence_numbers[adddeletestore] = <filesequencenumber>                
        TrailerCheck
			If no rows in file 
				UpdateSequenceNumber()
				proceed to next batch subprogram
			If issue reading trailer proceed to next batch subprogram
            //If next line is trailer & trailer says 0 rows, log "Empty file", update sequence number (adddeletestore.txt) & proceed to next batch subprogram
            //If next line is trailer & trailer says >0 rows, log error "Trailer row count mismatch, trailer says [trailer_rows] & [file_rows] in file" & proceed to next batch subprogram
            // Read rows until trailer row, store in num_rows  // Unnecessary? (Case 'T' has same functionality)
	
		Move to record immediately following header
	(A) If at end of file, proceed to cleanup
		Read a line from file as as a string - input_line
        // Input section
        // If at trailer, proceed to next batch subprogram
		std::string input_string
		Switch input_line[0]
            Case 'D'
                Create an instance of Update_Item_Data_Event
                Store 'D' action_type in Update_Item_Data_Event
                input_string = input_line.substr(items_txt_d_item_number_pos,items_txt_d_item_number_len)
                Store item_code in Update_Item_Data_Event instance
                Push_back Update_Item_Data_Event instance to storage vector
                Proceed to next record
            Case 'A'
                Store 'A' action_type in Update_Item_Data_Event              
				input_string = input_line.substr(items_txt_a_item_number_pos,items_txt_a_item_number_len)
				Store item_code in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_a_item_name_pos,items_txt_a_item_name_len)
				Store item_name in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_a_item_description_pos,items_txt_a_item_description_len)
				Store item_description in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_a_item_dosage_pos,items_txt_a_item_dosage_len)
				Store item_dosage in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_a_warehouse_reorder_level_pos,items_txt_a_warehouse_reorder_level_len)
				Store warehouse_reorder_level in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_a_vendor_code_pos,items_txt_a_vendor_code_len)
				Store vendor_code in Update_Item_Data_Event
                input_string = input_line.substr(items_txt_a_warehouse_reorder_quantity_pos,items_txt_a_warehouse_reorder_quantity_len)
				Store warehouse_reorder_quantity in Update_Item_Data_Event
                input_string = input_line.substr(items_txt_a_expected_delivery_time_pos,items_txt_a_expected_delivery_time_len)
				Store expected_delivery_time in Update_Item_Data_Event instance
				Push_back Update_Item_Data_Event instance to storage vector
                Proceed to next record
            Case 'C'
            	Store 'C' action_type in Update_Item_Data_Event
                input_string = input_line.substr(items_txt_c_item_number_pos,items_txt_c_item_number_len)
				Store item_code in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_c_item_name_pos,items_txt_c_item_name_len)
				Store item_name in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_c_item_description_pos,items_txt_c_item_description_len)
				Store item_description in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_c_item_dosage_pos,items_txt_c_item_dosage_len)
				Store item_dosage in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_c_warehouse_reorder_level_pos,items_txt_c_warehouse_reorder_level_len)
				Store warehouse_reorder_level in Update_Item_Data_Event instance
                input_string = input_line.substr(items_txt_c_vendor_code_pos,items_txt_c_vendor_code_len)
				Store vendor_code in Update_Item_Data_Event
                input_string = input_line.substr(items_txt_c_warehouse_reorder_quantity_pos,items_txt_c_warehouse_reorder_quantity_len)
				Store warehouse_reorder_quantity in Update_Item_Data_Event
                input_string = input_line.substr(items_txt_c_expected_delivery_time_pos,items_txt_c_expected_delivery_time_len)
				Store expected_delivery_time in Update_Item_Data_Event instance				
				Push_back Update_Item_Data_Event instance to storage vector
                Proceed to next record
            Case 'T'
                //Do nothing
                //Read 4 characters and store in num_rows
                //Count number of items in table vector
                //If number of items <> num_rows, log error "Trailer row count does not match number of rows" and proceed
			Case 'N'
				Store 'N' action_type in Update_Item_Data_Event
				Store specific_action_designation // ie, A records = NA
				input_string = input_line.substr(items_txt_n_update_item_action_count,items_txt_n_update_item_action_count_len) // Specific action count is number following N that indicates the number of records of that specific action
				Store update_item_action_count in Update_Item_Data_Event instance			
            Case default
                Log error "Invalid action code - <givencode>"			
		
		// Cleanup section

		For curr_item = 0 to count of Add_Delete_Store_Event vector items
*				TODO:  **// If any integers are negative, log error & delete
D*->ND->A*->NA->C*->NC

			If first row == D
				While row action == D 
					action_counter++
					Move to next record
				If no more rows || next row != ND error
			If first row == A
				While row action == A 
					action_counter++
					Move to next record
				If no more rows || next row != NA error
			If first row == C
				While row action == C 
					action_counter++
					Move to next record
				If no more rows || next row != NC error
			
			HD
			D
			D
			D
			A
			A
			A
			NA
			


				If item[curr_item].action_type == 'I'
					Log Error "I record encountered out of sequence"
					Delete item[curr_item]
					curr_item--
				If item[curr_item].action_type == 'C'
					Log Error "C record encountered out of sequence"
					Delete item[curr_item]				
					curr_item--
				If item[curr_item].action_type == 'A'
					Set item_counter to 0
					Set a_record to curr_item
					curr_item++
					If item[curr_item].action_type != 'I'
						Delete item[a_record]
						Delete item[curr_item]
						Log Error
					While (item[curr_item].action_type == 'I')
						item_counter++
						curr_item++
					If item[curr_item].action_type != 'C' || C record item count != item_counter
						If item[curr_item].action_type != 'C' Log Error "Action codes A-I-C out of sequence"
						If C record item count != item_counter Log Error "Item count does not match C record count"
						curr_item-- // Back up one record so we don't delete possibly 'good' record
						while (curr_item => a_record)
							Delete item[curr_item]
							curr_item--		
			
		If (CheckSpaces(items.txt, 20)
					Store "" in Update_Item_Data_Event // Signifies we need to not make a change during processing
				Else
					Trim spaces off right side
					*Convert letters to uppercase
					Store item_name in Update_Item_Data_Event instance
		

	CheckSpaces(std::string input_string, int field_length)
		Set all_spaces_flag to true
		For each character in (iterate over field_length characters)
			If character != <space> 
				all_spaces_flag == false
				return all_spaces_flag	
	
			
		
		













