GetActiveCashierNumber			
			- AccountExistsByNameAddress
			- AccountExistsByNumber
			- CreateAccount
			- DisplayOrderEntry
AddItemToOrder
			- DeleteItemFromOrder
			- GetVerifyingCashierNumber
			- ApplyCoupon

			
			
			
			
			
			// Include section
#include "PMACS_Globals.h"
#include "PMACS_Logger.h"
#include "PMACS_Defines.h"
#include "PMACS_Data_Structures.h"
#include "PMACS_Database.h"
#include "PMACS_File.h"
#include "PMACS_Display.h"
#include "PMACS_Batch.h"
#include "PMACS_Utility.h"
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <cmath>
using namespace std;

#define ACCOUNT_NUMBER_LEN 7
#define CASHIER_NUMBER_LEN 5

Transaction pendingTransaction;
int storeNumber = 0;


int getActiveCashierNumber();
int accountExistsByName(string, string);
int accountExistsByNumber(int);
int createAccount();
bool addItemToOrderByName();
bool addItemToOrderByNumber(int);
bool deleteItemFromOrderbyName();
bool deleteItemFromOrderbyNumber(int itemNumber);
int getVerifyingCashierNumber();
void applyCoupon();
long long getID(string IDtype, int IDlength);
int findWarehouseItem(string itemName);








int main()
{
	
	//string trim test
	string test = "don     uts                    ";
	int num = -3;

	int numb = StringFindLastCharacter(test);

	string test2 = StringSpaceTrim(test);

	string test3 = test;
	test3.erase(5, test.length());
	test3 = StringSpaceTrim(test3);
	test += "$";
	test2 += "$";
	test3 += "$";
	string test4 = "fhgadfSHDTRSHdhDFh dhD rHSDRF hSdhjsdF T h S";
	test4 = upperCase(test4);
	cout << test << endl << test2 << endl << test3 << endl << numb << endl << test4 << endl;

	double hold = 12345678901;
	long long hold2 = 999999999;
	int hold3 = hold2;

	cout << hold2 << endl << hold3 << endl;

	string test6 = "I WANT a hambUrgarrr           ";
	string test9 = "I want a hAmbUrgarrr   ";

	if (StringComparison(test6, test9))
	{
		cout << "yay" << endl;
	}
	else
	{
		cout << "you suck" << endl;
	}


	vector<int> map;

	for (int x = 0; x < 10; x++)
	{
		map.push_back(x+1);
	}

	vector<int> map2 = map;


	for (int x = 0; x < 10; x++)
	{
		cout << map2[x];
	}



	cout << endl;


	string tomato;

	cout << "enter: ";
	cin >> tomato;

	cout << "enter: ";
	cin >> tomato;
	cin.ignore();


	cout << "enter: ";
	cin >> tomato;
	cin.ignore();

	cout << "enter: ";
	getline(cin, tomato);

	cout << "enter: ";
	getline(cin, tomato);
 
	cout << "enter: ";
	cin >> tomato;
	cin.ignore();

	cout << "enter: ";
	getline(cin, tomato);












	system("pause");
	return 0;
}




//if -1, return to previous menu selected
int getActiveCashierNumber() 
{
	bool accepted = false;
	int cashierID = 0;

	//get number 
	while (!accepted)
	{
		int result = getID("cashier", CASHIER_NUMBER_LEN);

		if (result == -1)		//return to previous menu
		{
			return result;
		}
		else if (result)		//accepted ID (result is non zero)
		{
			cashierID = result;
			accepted = true;
		}
	}
	return cashierID;		// 0|false if not accpted
};

//give user entered name and address
//get index of account if exists, 
int accountExistsByName(string name, string address) 
{
	//Find account
	for (int x = 0; x < customer_table.size(); x++)
	{
		if (StringComparison(customer_table[x].name, name))
		{
			if (StringComparison(customer_table[x].address, address))
			{
				return x;		//return account index | true
			}
		}
	}
	return 0; // not found
};


//give user entered ID
//get index of account if exists, 
int accountExistsByNumber(int accNumber) 
{
	//Find account
	for (int x = 0; x < customer_table.size(); x++)
	{
		if (customer_table[x].account_number == accNumber)
		{
			return x;		//return account index | true
		}
	}
	return 0; // not found
};

//create account and return index. |-1 return to previous menu| 0 account not created/false
int createAccount() 
{
	Customer newCust;
	string name;
	string address;

	int accID = getID("customer", ACCOUNT_NUMBER_LEN);

	if (accID == -1)
	{
		return accID;
	}
	else if (!accountExistsByNumber(accID))						//accid is 0, no account found for that number -- make new
	{
		//assign account number
		newCust.account_number = accID;

		cout << "Enter customer information; 2 fields, or q to return to previous menu." << endl;

		//assign name
		cout << "Name: ";
		getline(cin, name);
		newCust.name = name;

		//assign address
		cout << "Address: ";
		getline(cin, address);
		newCust.address = address;

		//add to table
		customer_table.push_back(newCust);
		return (customer_table.size() - 1);
	}
	else					//account already exists
	{
		cout << "Cannot create new account. Account for that number exists." << endl;
		return 0;
	}

};

//returns true when item has been added
bool addItemToOrderByName()
{
	//get item name
	string itemName;
	cout << "Enter the name of the item you wish to add, or q to return to previous menu: ";
	getline(cin, itemName);

	int itemNumber;

	//find item at warehouse to get details
	int ind = findWarehouseItem(itemName);
	if (ind != -1 && warehouse_table[ind].item_status == 'A')			//found and active
	{
		itemNumber = warehouse_table[ind].item_number;				//get number
	}
	else
	{
		cout << "Cannot add item. Does not exist within the company." << endl;
		return false;
	}


	//look for item number at store
	if (addItemToOrderByNumber(itemNumber))
	{
		return true;
	}

	return false;
};

//number must be validated before passing
bool addItemToOrderByNumber(int itemNumber) 
{
	int storeIndex = findStoreItem(itemNumber, storeNumber);

	if (storeIndex == -1 || store_inventory_table[storeIndex].item_status == 'D')			//item not found or inactive
	{
		cout << "Cannot add item. Does not exist within the store." << endl;
		return false;
	}
	else if (store_inventory_table[storeIndex].item_status == 'A')			//item found at store && active
	{
		int warehouseIndex = findWarehouseItem(itemNumber);
		string quantity;
		long long numQuantity;

		cout << "Quantity: ";
		cin.ignore();
		getline(cin, quantity);

		if (quantity.length() < g_storeupdate_txt_requested_quantity_len)		//correct length
		{
			if (validateAllNumbers)												//if all numbers
			{
				numQuantity = stoll(quantity);	            					//convert
			}
		}

		if (numQuantity <= store_inventory_table[storeIndex].quantity)			//sufficient stock| add to transaction
		{
			//add item number
			pendingTransaction.transaction_item_number.push_back(itemNumber);

			//add quantity
			store_inventory_table[storeIndex].quantity -= numQuantity;			//remove quantity from inventory
			pendingTransaction.transaction_item_quantity.push_back(numQuantity);

			//add price
			pendingTransaction.transaction_item_price.push_back(warehouse_table[warehouseIndex].price);
			return true;
		}
		else
		{
			cout << "Insufficient stock to add to order." << endl;
			return false;
		}
	}
};


bool deleteItemFromOrderbyName() 
{
	//get item name
	string itemName;
	cout << "Enter the name of the item you wish to add, or q to return to previous menu: ";
	getline(cin, itemName);



	int itemNumber;

	//search for item number

	//find item at warehouse to get details
	int ind = findWarehouseItem(itemName);
	if (ind != -1 && warehouse_table[ind].item_status == 'A')			//found and active
	{
		itemNumber = warehouse_table[ind].item_number;				//get number
	}
	else
	{
		cout << "Cannot add item. Does not exist within the company." << endl;
		return false;
	}

	//look for item number at store
	if (deleteItemFromOrderbyNumber(itemNumber))
	{
		return true;
	}
	return false;
};


//assumes number has been validated before passing inside
bool deleteItemFromOrderbyNumber(int itemNumber)
{
	for (int x = 0; x < pendingTransaction.transaction_item_number.size(); x++)
	{
		if (pendingTransaction.transaction_item_number[x] == itemNumber)
		{
			pendingTransaction.transaction_item_number.erase(pendingTransaction.transaction_item_number.begin() + (x - 1));			//hopefully works
			pendingTransaction.transaction_item_price.erase(pendingTransaction.transaction_item_price.begin() + (x - 1));			//hopefully works
			pendingTransaction.transaction_item_quantity.erase(pendingTransaction.transaction_item_quantity.begin() + (x - 1));		//hopefully works
			return true;
		}
	}
	return false;
};


int getVerifyingCashierNumber() 
{
	return getActiveCashierNumber();
};
void applyCoupon() 
{

};

//get an ID number
long long getID(string IDtype, int IDlength)
{
	string num;
	cout << "Enter the " << IDtype << " number, or q to return to previous menu: ";
	cin >> num;
		
	if (num.length() < IDlength)												//correct number of "digits"	
	{
		if (validateAllNumbers(num))											//all numbers | positive
		{
			int IDnumber = stoi(num);			//convert to number
			if (IDnumber)						//ID not 0
			{
				return IDnumber;	//true		//accept			
			}
		}
	}

	else if (num.length() == 1 && (num[0] == 'Q' || num[0] == 'q'))				//quit option
	{
		return -1;				//return to previous menu
	}

	return 0;			//false
}




//find item at warehouse by name
int findWarehouseItem(string itemName)
{
	for (int x = 0; x < warehouse_table.size(); x++)
	{
		if (StringComparison(itemName, warehouse_table[x].item_name))			//match && active
		{
			return x;
		}
	}
	return -1;
}




//batch sales reports
bool batchReportGeneration()
{
	ifstream reports;
	//header / trailer checks for addstoreitems
	if (openFile("reports.txt", reports))
	{
		Plog.logInfo("reports.txt", "File opened successfully.");
	}
	else
	{
		Plog.logWarn("reports.txt", "File does not exist or unable to read.");
		return true;
	}

	if (!headerCheck(reports))
	{
		Plog.logError("reports.txt", "Header read failed.");
		return false;
	}

	if (!sequenceCheck(reports, g_reports))
	{
		Plog.logError("reports.txt", "Sequence out of order.");
		return false;
	}

	int trailerResult;
	trailerResult = trailerCheck(reports, false);

	if (trailerResult == -1)
	{
		Plog.logError("reports.txt", "Unable to locate trailer or trailer count mismatch");
	}
	if (trailerResult == 0)
	{
		Plog.logInfo("reports.txt", "Trailer count is 0");
		return true;
	}


	ofstream report;
	if (!createFile("reports.txt", report))
	{
		return false;
	}
	cout  <<"BATCH MASSE REPORT ON COMPANY INVENTORY" << endl;
	cout  <<"DATE: " << systemDate.GetDate() << endl << endl;

	vector<int> report_items;
	int lineCounter = 1;
	while (report.good() && !report.eof())
	{
		string item;
		if (correctRecordLength(item, g_reports, lineCounter))
		if (item[0] == 'I')
		{
			item.erase(0);
			if (validateAllNumbers(item))
			{
				report_items.push_back(stoi(item));
			}
		}

	}

	Date transDate(transaction_table[0].transaction_date);
	Date tempDate(transaction_table[transaction_table.size() - 1].transaction_date);
	int compYear = transDate.GetYear();
	int yearStop = tempDate.GetYear();
	int compMonth = transDate.GetMonth();
	long double subTotalCash = 0.00;
	unsigned long long subTotalQuantity = 0;
	long double grandTotalCash = 0.00;
	unsigned long long grandTotalQuantity = 0;
	long double massTotalCash = 0.00;
	unsigned long long massTotalQuantity = 0;
	bool firstFind = true;
	bool newYear = false;
	//for each year after first transaction until the last
	for (int y = compYear; y <= yearStop; y++)
	{
		cout  <<compYear << endl;

		//for every requested inventory item
		for (int i = 0; i < report_items.size(); i++)
		{ 
			int wH = findWarehouseItem(report_items[i]);
			bool printReport = false;
			//for every transaction
			for (int t = 0; t < transaction_table.size(); t++)
			{
				//for every transaction item
				for (int ti = 0; ti < transaction_table[t].transaction_item_number.size(); ti++)
				{
					//if correct item
					if (warehouse_table[wH].item_number == transaction_table[t].transaction_item_number[ti])
					{
						//and the correct year
						tempDate.NewDate(transaction_table[t].transaction_date);
						if (tempDate.GetYear() == compYear)
						{
							//if first instance of the item in report year
							if (firstFind)
							{
								firstFind = false;
								cout << warehouse_table[wH].item_number << " - " << warehouse_table[wH].item_name << endl;			//print item
								compMonth = tempDate.GetMonth();
								printReport = true;
							}
							if (compMonth != tempDate.GetMonth())		//new month
							{
								cout << setw(5) << " " << compMonth << endl;
								cout  <<setw(10) << "Subtotals:        " << "Quantity: " << setw(25) << left << subTotalQuantity << "Value: $" << setprecision(2) << subTotalCash << endl;
								printReport = false;
								compMonth = tempDate.GetMonth();
								//cout  <<setw(5) << " " << compMonth << endl;			//print new month
								//add subtotals to grandtotals
								grandTotalCash += subTotalCash;
								grandTotalQuantity += subTotalQuantity;
								//reset subtotals
								subTotalCash = 0.00;
								subTotalQuantity = 0;
							}
							else
							{
								//add values to subtotals;
								subTotalCash += transaction_table[t].transaction_item_price[ti];
								subTotalQuantity += transaction_table[t].transaction_item_quantity[ti];
							}
						}
						else		//new year
						{
							break; //next item
						}
					}
				}
			}
			if (printReport)
			{
				cout << setw(5) << " " << compMonth << endl;
				cout << setw(10) << "Subtotals:        " << "Quantity: " << setw(25) << left << subTotalQuantity << "Value: $" << setprecision(2) << subTotalCash << endl;
				//add subtotals to grandtotals
				grandTotalCash += subTotalCash;
				grandTotalQuantity += subTotalQuantity;
				//reset subtotals
				subTotalCash = 0.00;
				subTotalQuantity = 0;
			}
			firstFind = true;
		}
		cout << setw(10) << "Grandtotals:        " << "Quantity: " << setw(25) << left << grandTotalQuantity << "Value: $" << setprecision(2) << grandTotalCash << endl;		//output subtotals
		massTotalCash += grandTotalCash;
		massTotalQuantity += grandTotalQuantity;
		grandTotalCash = 0.00;
		grandTotalQuantity = 0;
		compYear++;
	}
	cout << setw(10) << "MassTotals:        " << "Quantity: " << setw(25) << left << grandTotalQuantity << "Value: $" << setprecision(2) << grandTotalCash << endl;		//output subtotals
	return true;
}

bool mergeReturnsAndOrders()
{
	ifstream returnItemsFile;
	ifstream vendorOrdersFile;

	//header / trailer checks for return items
	if (openFile("returnitems.txt", returnItemsFile))
	{
		Plog.logInfo("returnitems.txt", "File opened successfully.");
	}
	else
	{
		Plog.logWarn("returnitems.txt", "File does not exist or unable to read.");
		return true;
	}

	if (!headerCheck(returnItemsFile))
	{
		Plog.logError("returnitems.txt", "Header read failed.");
		return false;
	}

	if (!sequenceCheck(returnItemsFile, g_returnitems))
	{
		Plog.logError("returnitems.txt", "Sequence out of order.");
		return false;
	}

	int trailerResult;
	trailerResult = trailerCheck(returnItemsFile, false);

	if (trailerResult == -1)
	{
		Plog.logError("returnitems.txt", "Unable to locate trailer or trailer count mismatch");
	}
	if (trailerResult == 0)
	{
		Plog.logInfo("returnitems.txt", "Trailer count is 0");
		return true;
	}




	//header / trailer checks for vendor orders
	if (openFile("vendororder.txt", vendorOrdersFile))
	{
		Plog.logInfo("vendororder.txt", "File opened successfully.");
	}
	else
	{
		Plog.logWarn("vendororder.txt", "File does not exist or unable to read.");
		return true;
	}

	if (!headerCheck(vendorOrdersFile))
	{
		Plog.logError("vendororder.txt", "Header read failed.");
		return false;
	}

	if (!sequenceCheck(vendorOrdersFile, g_vendororder))
	{
		Plog.logError("vendororder.txt", "Sequence out of order.");
		return false;
	}


	trailerResult = trailerCheck(vendorOrdersFile, false);

	if (trailerResult == -1)
	{
		Plog.logError("vendororder.txt", "Unable to locate trailer or trailer count mismatch");
	}
	if (trailerResult == 0)
	{
		Plog.logInfo("vendororder.txt", "Trailer count is 0");
		return true;
	}


	positionFileForRecords(returnItemsFile);
	positionFileForRecords(vendorOrdersFile);

	vector<string> fusion;
	int itemCounter = 0;
	int lineCount = 1;


	//read Return Items
	while (returnItemsFile.good() && !returnItemsFile.eof())
	{
		string record;
		getline(returnItemsFile, record);

		if (correctRecordLength(record, g_vendororder, lineCount))
		{
			fusion.push_back(record);
			itemCounter++;
		}
	}

	//read Vendor shipments
	while (vendorOrdersFile.good() && !vendorOrdersFile.eof())
	{
		string record;
		getline(vendorOrdersFile, record);

		if (correctRecordLength(record, g_vendororder, lineCount))
		{
			fusion.push_back(record);
			itemCounter++;
		}
	}

	//create file for merge
	ofstream outputFile;
	createFile("itemreceived.txt", outputFile);

	for (int x = 0; x < fusion.size(); x++)
	{
		outputFile << fusion[x] << endl;
	}
}

bool mergeAddStoreBatchReplenishOnlineInvRequests()
{
	int lineCount = 0;
	int itemcount = 0;

	ifstream addStoreItemsFile;
	//header / trailer checks for addstoreitems
	if (openFile("addstoreitems.txt", addStoreItemsFile))
	{
		Plog.logInfo("addstoreitems.txt", "File opened successfully.");
	}
	else
	{
		Plog.logWarn("addstoreitems.txt", "File does not exist or unable to read.");
		return true;
	}

	if (!headerCheck(addStoreItemsFile))
	{
		Plog.logError("addstoreitems.txt", "Header read failed.");
		return false;
	}

	if (!sequenceCheck(addStoreItemsFile, g_returnitems))
	{
		Plog.logError("addstoreitems.txt", "Sequence out of order.");
		return false;
	}

	int trailerResult;
	trailerResult = trailerCheck(addStoreItemsFile, false);

	if (trailerResult == -1)
	{
		Plog.logError("addstoreitems.txt", "Unable to locate trailer or trailer count mismatch");
	}
	if (trailerResult == 0)
	{
		Plog.logInfo("addstoreitems.txt", "Trailer count is 0");
		return true;
	}

	ifstream leftoversFile;
	//header / trailer checks for return items
	if (openFile("leftovers.txt", leftoversFile))
	{
		Plog.logInfo("returnitems.txt", "File opened successfully.");
	}
	else
	{
		Plog.logWarn("leftovers.txt", "File does not exist or unable to read.");
		return true;
	}

	if (!headerCheck(leftoversFile))
	{
		Plog.logError("leftovers.txt", "Header read failed.");
		return false;
	}

	if (!sequenceCheck(leftoversFile, g_returnitems))
	{
		Plog.logError("leftovers.txt", "Sequence out of order.");
		return false;
	}


	trailerResult = trailerCheck(leftoversFile, false);

	if (trailerResult == -1)
	{
		Plog.logError("leftovers.txt", "Unable to locate trailer or trailer count mismatch");
	}
	if (trailerResult == 0)
	{
		Plog.logInfo("leftovers.txt", "Trailer count is 0");
		return true;
	}


	ifstream onlineInvRequestFile;
	//header / trailer checks for return items
	if (openFile("onlineinvrequest.txt", onlineInvRequestFile))
	{
		Plog.logInfo("onlineinvrequest.txt", "File opened successfully.");
	}
	else
	{
		Plog.logWarn("onlineinvrequest.txt", "File does not exist or unable to read.");
		return true;
	}

	if (!headerCheck(onlineInvRequestFile))
	{
		Plog.logError("onlineinvrequest.txt", "Header read failed.");
		return false;
	}

	if (!sequenceCheck(onlineInvRequestFile, g_returnitems))
	{
		Plog.logError("onlineinvrequest.txt", "Sequence out of order.");
		return false;
	}

	trailerResult = trailerCheck(onlineInvRequestFile, false);

	if (trailerResult == -1)
	{
		Plog.logError("onlineinvrequest.txt", "Unable to locate trailer or trailer count mismatch");
	}
	if (trailerResult == 0)
	{
		Plog.logInfo("onlineinvrequest.txt", "Trailer count is 0");
		return true;
	}

	ifstream batchReplenishFile;
	//header / trailer checks for return items
	if (openFile("batchreplenish.txt", batchReplenishFile))
	{
		Plog.logInfo("batchreplenish.txt", "File opened successfully.");
	}
	else
	{
		Plog.logWarn("batchreplenish.txt", "File does not exist or unable to read.");
		return true;
	}

	if (!headerCheck(batchReplenishFile))
	{
		Plog.logError("batchreplenish.txt", "Header read failed.");
		return false;
	}

	if (!sequenceCheck(batchReplenishFile, g_returnitems))
	{
		Plog.logError("batchreplenish.txt", "Sequence out of order.");
		return false;
	}


	trailerResult = trailerCheck(batchReplenishFile, false);

	if (trailerResult == -1)
	{
		Plog.logError("batchreplenish.txt", "Unable to locate trailer or trailer count mismatch");
	}
	if (trailerResult == 0)
	{
		Plog.logInfo("batchreplenish.txt", "Trailer count is 0");
		return true;
	}

	//position file for reading
	positionFileForRecords(batchReplenishFile);
	positionFileForRecords(addStoreItemsFile);
	positionFileForRecords(leftoversFile);
	positionFileForRecords(onlineInvRequestFile);


	vector<Merge_Add_Online_Batch_Event> Fusion;

	//batch replenishment
	while (batchReplenishFile.good() && !batchReplenishFile.eof())
	{
		string record;
		getline(batchReplenishFile, record);

		if (correctRecordLength(record, g_batchreplenish, lineCount))
		{
			//store ID check
			if (0 > stoi(record.substr(g_batchreplenish_txt_store_number_pos, g_batchreplenish_txt_store_number_len)))							//if item number is less than 0
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "store ID is negative.");						//error
			}
			//priority check
			else if (0 > stoi(record.substr(g_batchreplenish_txt_store_priority_pos, g_batchreplenish_txt_store_priority_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "priority check is negative.");						//error
			}
			//item number check
			else if (0 > stoi(record.substr(g_batchreplenish_txt_item_number_pos, g_batchreplenish_txt_item_number_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "Vender number is negative.");						//error
			}
			//warehouse reorder quantity check
			else if (0 > stoll(record.substr(g_batchreplenish_txt_requested_quantity_pos, g_batchreplenish_txt_requested_quantity_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "Order quantity is negative.");						//error
			}
			else
			{
				Merge_Add_Online_Batch_Event temp;
				temp.store_priority = record[0];
				temp.store_number = stoi(record.substr(g_batchreplenish_txt_store_number_pos, g_batchreplenish_txt_store_number_len));
				temp.store_priority = stoi(record.substr(g_batchreplenish_txt_item_number_pos, g_batchreplenish_txt_item_number_len));
				temp.item_number = stoi(record.substr(g_batchreplenish_txt_item_number_pos, g_batchreplenish_txt_item_number_len));
				temp.requested_quantity = stoll(record.substr(g_batchreplenish_txt_requested_quantity_pos, g_batchreplenish_txt_requested_quantity_len));
				itemcount++;
				Fusion.push_back(temp);
			}
		}
	}

	lineCount = 1;
	while (addStoreItemsFile.good() && !addStoreItemsFile.eof())
	{
		string record;
		getline(addStoreItemsFile, record);

		if (correctRecordLength(record, g_addstoreitems, lineCount))
		{
			//store ID check
			if (0 > stoi(record.substr(g_addstoreitems_txt_store_number_pos, g_addstoreitems_txt_store_number_len)))							//if item number is less than 0
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "store ID is negative.");						//error
			}
			//priority check
			else if (0 > stoi(record.substr(g_addstoreitems_txt_store_priority_pos, g_addstoreitems_txt_store_priority_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "priority check is negative.");						//error
			}
			//item number check
			else if (0 > stoi(record.substr(g_addstoreitems_txt_item_number_pos, g_addstoreitems_txt_item_number_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "Vender number is negative.");						//error
			}
			//warehouse reorder quantity check
			else if (0 > stoll(record.substr(g_addstoreitems_txt_requested_quantity_pos, g_addstoreitems_txt_requested_quantity_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "Order quantity is negative.");						//error
			}
			else
			{
				Merge_Add_Online_Batch_Event temp;
				temp.store_priority = 'A';
				temp.store_number = stoi(record.substr(g_addstoreitems_txt_store_number_pos, g_addstoreitems_txt_store_number_len));
				temp.store_priority = stoi(record.substr(g_addstoreitems_txt_item_number_pos, g_addstoreitems_txt_item_number_len));
				temp.item_number = stoi(record.substr(g_addstoreitems_txt_item_number_pos, g_addstoreitems_txt_item_number_len));
				temp.requested_quantity = stoll(record.substr(g_addstoreitems_txt_requested_quantity_pos, g_addstoreitems_txt_requested_quantity_len));
				itemcount++;
				Fusion.push_back(temp);
			}

		}
	}

	lineCount = 1;
	while (leftoversFile.good() && !leftoversFile.eof())
	{
		string record;
		getline(batchReplenishFile, record);

		if (correctRecordLength(record, g_batchreplenish, lineCount))
		{
			//store ID check
			if (0 > stoi(record.substr(g_leftovers_txt_store_number_pos, g_leftovers_txt_store_number_len)))							//if item number is less than 0
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "store ID is negative.");						//error
			}
			//priority check
			else if (0 > stoi(record.substr(g_leftovers_txt_store_priority_pos, g_leftovers_txt_store_priority_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "priority check is negative.");						//error
			}
			//item number check
			else if (0 > stoi(record.substr(g_leftovers_txt_item_number_pos, g_leftovers_txt_item_number_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "Vender number is negative.");						//error
			}
			//warehouse reorder quantity check
			else if (0 > stoll(record.substr(g_leftovers_txt_requested_quantity_pos, g_leftovers_txt_requested_quantity_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "Order quantity is negative.");						//error
			}
			else
			{
				Merge_Add_Online_Batch_Event temp;
				temp.store_priority =
					temp.store_number = stoi(record.substr(g_leftovers_txt_store_number_pos, g_leftovers_txt_store_number_len));
				temp.store_priority = stoi(record.substr(g_leftovers_txt_item_number_pos, g_leftovers_txt_item_number_len));
				temp.item_number = stoi(record.substr(g_leftovers_txt_item_number_pos, g_leftovers_txt_item_number_len));
				temp.requested_quantity = stoll(record.substr(g_leftovers_txt_requested_quantity_pos, g_leftovers_txt_requested_quantity_len));
				itemcount++;
				Fusion.push_back(temp);
			}

		}
	}

	lineCount = 1;
	while (onlineInvRequestFile.good() && !onlineInvRequestFile.eof())
	{
		string record;
		getline(batchReplenishFile, record);

		if (correctRecordLength(record, g_batchreplenish, lineCount))
		{
			//store ID check
			if (0 > stoi(record.substr(g_onlineinvrequest_txt_store_number_pos, g_onlineinvrequest_txt_store_number_len)))							//if item number is less than 0
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "store ID is negative.");						//error
			}
			//priority check
			else if (0 > stoi(record.substr(g_onlineinvrequest_txt_store_priority_pos, g_onlineinvrequest_txt_store_priority_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "priority check is negative.");						//error
			}
			//item number check
			else if (0 > stoi(record.substr(g_onlineinvrequest_txt_item_number_pos, g_onlineinvrequest_txt_item_number_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "Vender number is negative.");						//error
			}
			//warehouse reorder quantity check
			else if (0 > stoll(record.substr(g_onlineinvrequest_txt_requested_quantity_pos, g_onlineinvrequest_txt_requested_quantity_len)))
			{
				Plog.logError("MergeReplenishmentAddItem:ValueRangeCheck:OOPS", "Order quantity is negative.");						//error
			}
			else
			{
				Merge_Add_Online_Batch_Event temp;
				temp.store_priority = 'O';
				temp.store_number = stoi(record.substr(g_onlineinvrequest_txt_store_number_pos, g_onlineinvrequest_txt_store_number_len));
				temp.store_priority = stoi(record.substr(g_onlineinvrequest_txt_item_number_pos, g_onlineinvrequest_txt_item_number_len));
				temp.item_number = stoi(record.substr(g_onlineinvrequest_txt_item_number_pos, g_onlineinvrequest_txt_item_number_len));
				temp.requested_quantity = stoll(record.substr(g_onlineinvrequest_txt_requested_quantity_pos, g_onlineinvrequest_txt_requested_quantity_len));
				itemcount++;
				Fusion.push_back(temp);
			}

		}
	}


	ofstream merged;
	bool createResult = createFile("storeupdate.txt", merged);
	if (!createResult)
	{
		Plog.logError("storeupdate", "Unable to create or write to storeupdate.txt");
		return false;
	}
	insertHeader(merged, g_storeupdate);

	for (int x = 0; x < Fusion.size(); x++)
	{
		merged << Fusion[x].source_code <<
			StringIntZeroFill(g_leftovers_txt_store_number_len, Fusion[x].store_number) <<
			StringIntZeroFill(g_leftovers_txt_store_priority_len, Fusion[x].store_priority) <<
			StringIntZeroFill(g_leftovers_txt_item_number_len, Fusion[x].item_number) <<
			StringIntZeroFill(g_leftovers_txt_requested_quantity_len, Fusion[x].requested_quantity) << std::endl << std::flush;
	}
	insertTrailer(merged, itemcount);
	leftoversFile.close();
	return true;
}
