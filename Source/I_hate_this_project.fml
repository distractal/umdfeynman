GetActiveCashierNumber			
			- AccountExistsByNameAddress
			- AccountExistsByNumber
			- CreateAccount
			- DisplayOrderEntry
AddItemToOrder
			- DeleteItemFromOrder
			- GetVerifyingCashierNumber
			- ApplyCoupon

			
			
			
			
			
			// Include section
#include "PMACS_Globals.h"
#include "PMACS_Logger.h"
#include "PMACS_Defines.h"
#include "PMACS_Data_Structures.h"
#include "PMACS_Database.h"
#include "PMACS_File.h"
#include "PMACS_Display.h"
#include "PMACS_Batch.h"
#include "PMACS_Utility.h"
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <cmath>
using namespace std;

#define ACCOUNT_NUMBER_LEN 7
#define CASHIER_NUMBER_LEN 5

Transaction pendingTransaction;
int storeNumber = 0;


int getActiveCashierNumber();
int accountExistsByName(string, string);
int accountExistsByNumber(int);
int createAccount();
bool addItemToOrderByName();
bool addItemToOrderByNumber(int);
bool deleteItemFromOrderbyName();
bool deleteItemFromOrderbyNumber(int itemNumber);
int getVerifyingCashierNumber();
void applyCoupon();
long long getID(string IDtype, int IDlength);
int findWarehouseItem(string itemName);








int main()
{
	
	//string trim test
	string test = "don     uts                    ";
	int num = -3;

	int numb = StringFindLastCharacter(test);

	string test2 = StringSpaceTrim(test);

	string test3 = test;
	test3.erase(5, test.length());
	test3 = StringSpaceTrim(test3);
	test += "$";
	test2 += "$";
	test3 += "$";
	string test4 = "fhgadfSHDTRSHdhDFh dhD rHSDRF hSdhjsdF T h S";
	test4 = upperCase(test4);
	cout << test << endl << test2 << endl << test3 << endl << numb << endl << test4 << endl;

	double hold = 12345678901;
	long long hold2 = 999999999;
	int hold3 = hold2;

	cout << hold2 << endl << hold3 << endl;

	string test6 = "I WANT a hambUrgarrr           ";
	string test9 = "I want a hAmbUrgarrr   ";

	if (StringComparison(test6, test9))
	{
		cout << "yay" << endl;
	}
	else
	{
		cout << "you suck" << endl;
	}


	vector<int> map;

	for (int x = 0; x < 10; x++)
	{
		map.push_back(x+1);
	}

	vector<int> map2 = map;


	for (int x = 0; x < 10; x++)
	{
		cout << map2[x];
	}



	cout << endl;


	string tomato;

	cout << "enter: ";
	cin >> tomato;

	cout << "enter: ";
	cin >> tomato;
	cin.ignore();


	cout << "enter: ";
	cin >> tomato;
	cin.ignore();

	cout << "enter: ";
	getline(cin, tomato);

	cout << "enter: ";
	getline(cin, tomato);
 
	cout << "enter: ";
	cin >> tomato;
	cin.ignore();

	cout << "enter: ";
	getline(cin, tomato);












	system("pause");
	return 0;
}




//if -1, return to previous menu selected
int getActiveCashierNumber() 
{
	bool accepted = false;
	int cashierID = 0;

	//get number 
	while (!accepted)
	{
		int result = getID("cashier", CASHIER_NUMBER_LEN);

		if (result == -1)		//return to previous menu
		{
			return result;
		}
		else if (result)		//accepted ID (result is non zero)
		{
			cashierID = result;
			accepted = true;
		}
	}
	return cashierID;		// 0|false if not accpted
};

//give user entered name and address
//get index of account if exists, 
int accountExistsByName(string name, string address) 
{
	//Find account
	for (int x = 0; x < customer_table.size(); x++)
	{
		if (StringComparison(customer_table[x].name, name))
		{
			if (StringComparison(customer_table[x].address, address))
			{
				return x;		//return account index | true
			}
		}
	}
	return 0; // not found
};


//give user entered ID
//get index of account if exists, 
int accountExistsByNumber(int accNumber) 
{
	//Find account
	for (int x = 0; x < customer_table.size(); x++)
	{
		if (customer_table[x].account_number == accNumber)
		{
			return x;		//return account index | true
		}
	}
	return 0; // not found
};

//create account and return index. |-1 return to previous menu| 0 account not created/false
int createAccount() 
{
	Customer newCust;
	string name;
	string address;

	int accID = getID("customer", ACCOUNT_NUMBER_LEN);

	if (accID == -1)
	{
		return accID;
	}
	else if (!accountExistsByNumber(accID))						//accid is 0, no account found for that number -- make new
	{
		//assign account number
		newCust.account_number = accID;

		cout << "Enter customer information; 2 fields, or q to return to previous menu." << endl;

		//assign name
		cout << "Name: ";
		getline(cin, name);
		newCust.name = name;

		//assign address
		cout << "Address: ";
		getline(cin, address);
		newCust.address = address;

		//add to table
		customer_table.push_back(newCust);
		return (customer_table.size() - 1);
	}
	else					//account already exists
	{
		cout << "Cannot create new account. Account for that number exists." << endl;
		return 0;
	}

};

//returns true when item has been added
bool addItemToOrderByName()
{
	//get item name
	string itemName;
	cout << "Enter the name of the item you wish to add, or q to return to previous menu: ";
	getline(cin, itemName);

	int itemNumber;

	//find item at warehouse to get details
	int ind = findWarehouseItem(itemName);
	if (ind != -1 && warehouse_table[ind].item_status == 'A')			//found and active
	{
		itemNumber = warehouse_table[ind].item_number;				//get number
	}
	else
	{
		cout << "Cannot add item. Does not exist within the company." << endl;
		return false;
	}


	//look for item number at store
	if (addItemToOrderByNumber(itemNumber))
	{
		return true;
	}

	return false;
};

//number must be validated before passing
bool addItemToOrderByNumber(int itemNumber) 
{
	int storeIndex = findStoreItem(itemNumber, storeNumber);

	if (storeIndex == -1 || store_inventory_table[storeIndex].item_status == 'D')			//item not found or inactive
	{
		cout << "Cannot add item. Does not exist within the store." << endl;
		return false;
	}
	else if (store_inventory_table[storeIndex].item_status == 'A')			//item found at store && active
	{
		int warehouseIndex = findWarehouseItem(itemNumber);
		string quantity;
		long long numQuantity;

		cout << "Quantity: ";
		cin.ignore();
		getline(cin, quantity);

		if (quantity.length() < g_storeupdate_txt_requested_quantity_len)		//correct length
		{
			if (validateAllNumbers)												//if all numbers
			{
				numQuantity = stoll(quantity);	            					//convert
			}
		}

		if (numQuantity <= store_inventory_table[storeIndex].quantity)			//sufficient stock| add to transaction
		{
			//add item number
			pendingTransaction.transaction_item_number.push_back(itemNumber);

			//add quantity
			store_inventory_table[storeIndex].quantity -= numQuantity;			//remove quantity from inventory
			pendingTransaction.transaction_item_quantity.push_back(numQuantity);

			//add price
			pendingTransaction.transaction_item_price.push_back(warehouse_table[warehouseIndex].price);
			return true;
		}
		else
		{
			cout << "Insufficient stock to add to order." << endl;
			return false;
		}
	}
};


bool deleteItemFromOrderbyName() 
{
	//get item name
	string itemName;
	cout << "Enter the name of the item you wish to add, or q to return to previous menu: ";
	getline(cin, itemName);



	int itemNumber;

	//search for item number

	//find item at warehouse to get details
	int ind = findWarehouseItem(itemName);
	if (ind != -1 && warehouse_table[ind].item_status == 'A')			//found and active
	{
		itemNumber = warehouse_table[ind].item_number;				//get number
	}
	else
	{
		cout << "Cannot add item. Does not exist within the company." << endl;
		return false;
	}

	//look for item number at store
	if (deleteItemFromOrderbyNumber(itemNumber))
	{
		return true;
	}
	return false;
};


//assumes number has been validated before passing inside
bool deleteItemFromOrderbyNumber(int itemNumber)
{
	for (int x = 0; x < pendingTransaction.transaction_item_number.size(); x++)
	{
		if (pendingTransaction.transaction_item_number[x] == itemNumber)
		{
			pendingTransaction.transaction_item_number.erase(pendingTransaction.transaction_item_number.begin() + (x - 1));			//hopefully works
			pendingTransaction.transaction_item_price.erase(pendingTransaction.transaction_item_price.begin() + (x - 1));			//hopefully works
			pendingTransaction.transaction_item_quantity.erase(pendingTransaction.transaction_item_quantity.begin() + (x - 1));		//hopefully works
			return true;
		}
	}
	return false;
};


int getVerifyingCashierNumber() 
{
	return getActiveCashierNumber();
};
void applyCoupon() 
{

};

//get an ID number
long long getID(string IDtype, int IDlength)
{
	string num;
	cout << "Enter the " << IDtype << " number, or q to return to previous menu: ";
	cin >> num;
		
	if (num.length() < IDlength)												//correct number of "digits"	
	{
		if (validateAllNumbers(num))											//all numbers | positive
		{
			int IDnumber = stoi(num);			//convert to number
			if (IDnumber)						//ID not 0
			{
				return IDnumber;	//true		//accept			
			}
		}
	}

	else if (num.length() == 1 && (num[0] == 'Q' || num[0] == 'q'))				//quit option
	{
		return -1;				//return to previous menu
	}

	return 0;			//false
}




//find item at warehouse by name
int findWarehouseItem(string itemName)
{
	for (int x = 0; x < warehouse_table.size(); x++)
	{
		if (StringComparison(itemName, warehouse_table[x].item_name))			//match && active
		{
			return x;
		}
	}
	return -1;
}




