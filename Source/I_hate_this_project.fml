//if -1, return to previous menu selected
int getActiveCashierNumber() 
{
	bool accepted = false;
	int cashierID = 0;

	//get number 
	while (!accepted)
	{
		int result = getID("cashier", CASHIER_NUMBER_LEN);

		if (result == -1)		//return to previous menu
		{
			return result;
		}
		else if (result)		//accepted ID (result is non zero)
		{
			cashierID = result;
			accepted = true;
		}
	}
	return cashierID;		// 0|false if not accpted
};

//give user entered name and address
//get index of account if exists, 
int accountExistsByName(string name, string address) 
{
	//Find account
	for (int x = 0; x < customer_table.size(); x++)
	{
		if (StringComparison(customer_table[x].name, name))
		{
			if (StringComparison(customer_table[x].address, address))
			{
				return x;		//return account index | true
			}
		}
	}
	return 0; // not found
};


//give user entered ID
//get index of account if exists, 
int accountExistsByNumber(int accNumber) 
{
	//Find account
	for (int x = 0; x < customer_table.size(); x++)
	{
		if (customer_table[x].account_number == accNumber)
		{
			return x;		//return account index | true
		}
	}
	return 0; // not found
};

//create account and return index. |-1 return to previous menu| 0 account not created/false
int createAccount() 
{
	Customer newCust;
	string name;
	string address;

	int accID = getID("customer", ACCOUNT_NUMBER_LEN);

	if (accID == -1)
	{
		return accID;
	}
	else if (!accountExistsByNumber(accID))						//accid is 0, no account found for that number -- make new
	{
		//assign account number
		newCust.account_number = accID;

		cout << "Enter customer information; 2 fields, or q to return to previous menu." << endl;

		//assign name
		cout << "Name: ";
		getline(cin, name);
		newCust.name = name;

		//assign address
		cout << "Address: ";
		getline(cin, address);
		newCust.address = address;

		//add to table
		customer_table.push_back(newCust);
		return (customer_table.size() - 1);
	}
	else					//account already exists
	{
		cout << "Cannot create new account. Account for that number exists." << endl;
		return 0;
	}

};

//returns true when item has been added
bool addItemToOrderByName()
{
	//get item name
	string itemName;
	cout << "Enter the name of the item you wish to add, or q to return to previous menu: ";
	getline(cin, itemName);

	int itemNumber;
	int storeItemIndex;

	//find item at warehouse to get details
	for (int x = 0; x < warehouse_table.size(); x++)
	{
		if (StringComparison(itemName, warehouse_table[x].item_name) && (warehouse_table[x].item_status == 'A'))			//match && active
		{
			itemNumber = warehouse_table[x].item_number;				//get number
		}
		else
		{
			cout << "Cannot add item. Does not exist within the company." << endl;
			return false;
		}
	}

	//look for item number at store
	if (addItemToOrderByNumber(itemNumber))
	{
		return true;
	}

	return false;
};
bool addItemToOrderByNumber(int itemNumber) 
{
	int storeIndex = findStoreItem(itemNumber, storeNumber);

	if (storeIndex == -1 || store_inventory_table[storeIndex].item_status == 'D')			//item not found or inactive
	{
		cout << "Cannot add item. Does not exist within the store." << endl;
		return false;
	}
	else if (store_inventory_table[storeIndex].item_status == 'A')			//item found at store && active
	{
		int warehouseIndex = findWarehouseItem(itemNumber);
		string quantity;
		long long numQuantity;

		cout << "Quantity: ";
		cin.ignore();
		getline(cin, quantity);

		if (quantity.length() < g_storeupdate_txt_requested_quantity_len)		//correct length
		{
			if (validateAllNumbers)												//if all numbers
			{
				numQuantity = stoll(quantity);	            					//convert
			}
		}

		if (numQuantity <= store_inventory_table[storeIndex].quantity)			//sufficient stock| add to transaction
		{
			//add item number
			pendingTransaction.transaction_item_number.push_back(itemNumber);
			store_inventory_table[storeIndex].quantity -= numQuantity;			//remove quantity from inventory

			//add quantity
			pendingTransaction.transaction_item_quantity.push_back(numQuantity);

			//add price
			pendingTransaction.transaction_item_price.push_back(warehouse_table[warehouseIndex].price);
			return true;
		}
		else
		{
			cout << "Insufficient stock to add to order." << endl;
			return false;
		}
	}
};


//get an ID number
long long getID(string IDtype, int IDlength)
{
	string num;
	cout << "Enter the " << IDtype << " number, or q to return to previous menu: ";
	cin >> num;
		
	if (num.length() < IDlength)												//correct number of "digits"	
	{
		if (validateAllNumbers(num))											//all numbers | positive
		{
			int IDnumber = stoi(num);			//convert to number
			if (IDnumber)						//ID not 0
			{
				return IDnumber;	//true		//accept			
			}
		}
	}

	else if (num.length() == 1 && (num[0] == 'Q' || num[0] == 'q'))				//quit option
	{
		return -1;				//return to previous menu
	}

	return 0;			//false
}








